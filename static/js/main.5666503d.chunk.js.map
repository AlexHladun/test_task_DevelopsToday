{"version":3,"sources":["components/ItemPost.jsx","redux/actions.js","components/ItemPostHandler.jsx","components/ListPosts.jsx","components/ListPostsHandler.jsx","redux/reducers.js","App.js","serviceWorker.js","index.js"],"names":["ItemPost","props","react_default","a","createElement","className","selected","editable","type","value","editedPost","body","onChange","event","updateEditedItem","target","onKeyDown","key","updateItem","cancelEditing","onClick","selectItem","title","date","creator","editItem","deleteItem","LOAD","DISPLAY","SELECT_ITEM","DESELECT_ITEM","DELETE_ITEM","EDIT_ITEM","UPDATE_EDITED_ITEM","CANCEL_EDITING","UPDATE_ITEM","load","dispatch","fetch","then","response","json","data","posts","display","ItemPostHandler","connect","state","ownProps","selectedItemIndex","postIndex","editing","itemIndex","ListPosts","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","container","React","createRef","_this2","clickEvent","current","contains","deselectItem","document","addEventListener","removeEventListener","requested","ref","map","index","components_ItemPostHandler","id","Component","ListPostsHandler","initialState","store","createStore","arguments","length","undefined","action","objectSpread","newSelectedItemIndex","filter","item","applyMiddleware","thunk","App","es","components_ListPostsHandler","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5666503d.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../ItemPost.css';\r\nfunction ItemPost(props) {\r\n  return (\r\n    <article className={props.selected ? 'selected' : ''}>\r\n      {\r\n        props.editable\r\n          ?<input type='text' value={props.editedPost.body}\r\n                   onChange={(event) => props.updateEditedItem(event.target.value)}\r\n                   onKeyDown={(event) => {\r\n                      if(event.key === 'Enter'){\r\n                        props.updateItem();\r\n                      } else if (event.key === 'Escape') {\r\n                        props.cancelEditing();\r\n                      }\r\n                    }}\r\n          />\r\n          : <div className='post' onClick={props.selectItem}>\r\n            <h2>{props.title}</h2>\r\n            <p>{props.body}</p>\r\n            <div>date:{props.date}</div>\r\n            <div>creator:{props.creator}</div>\r\n          </div>\r\n        }\r\n      <button className=\"show-selected-item\" onClick={props.editItem}>&#9997;</button>\r\n      <button onClick={props.deleteItem}>&times;</button>\r\n     </article>\r\n  );\r\n}\r\n\r\nexport default ItemPost;\r\n","export const LOAD = 'load';\r\nexport const DISPLAY = 'display'\r\nexport const SELECT_ITEM = 'select_item';\r\nexport const DESELECT_ITEM = 'deselect_item';\r\nexport const DELETE_ITEM = 'delete_item';\r\nexport const EDIT_ITEM = 'edit_item';\r\nexport const UPDATE_EDITED_ITEM = 'update_edited_item';\r\nexport const CANCEL_EDITING = 'cancel_editing';\r\nexport const UPDATE_ITEM = 'update_item';\r\n\r\nexport function load() {\r\n  return (dispatch) => {\r\n    dispatch({\r\n      type: LOAD\r\n    });\r\n   fetch('https://simple-blog-api.crew.red/posts')\r\n    .then(response => response.json())\r\n    .then(data => data)\r\n    .then((posts) => {\r\n      dispatch(display(posts))\r\n    })\r\n  }\r\n}\r\nexport function display(posts) {\r\n  return {\r\n    type: DISPLAY,\r\n    posts\r\n  };\r\n}\r\nexport function selectItem(selectedItemIndex) {\r\n  return {\r\n    type: SELECT_ITEM,\r\n    selectedItemIndex,\r\n  };\r\n}\r\nexport function deselectItem() {\r\n  return {\r\n    type: DESELECT_ITEM,\r\n  };\r\n}\r\nexport function deleteItem(itemIndex) {\r\n  return {\r\n    type: DELETE_ITEM,\r\n    itemIndex,\r\n  };\r\n}\r\nexport function editItem() {\r\n  return {\r\n    type: EDIT_ITEM,\r\n  };\r\n}\r\nexport function updateEditedItem(editedPost) {\r\n  return {\r\n    type: UPDATE_EDITED_ITEM,\r\n    editedPost,\r\n  };\r\n}\r\nexport function cancelEditing() {\r\n  return {\r\n    type: CANCEL_EDITING,\r\n  };\r\n}\r\nexport function updateItem() {\r\n  return {\r\n    type: UPDATE_ITEM,\r\n  };\r\n}","import {connect} from 'react-redux';\r\nimport ItemPost from './ItemPost';\r\nimport {cancelEditing,\r\n  deleteItem,\r\n  editItem,\r\n  selectItem,\r\n  updateEditedItem,\r\n  updateItem} from '../redux/actions';\r\n\r\nfunction mapStateToProps(state, ownProps) {\r\n  const selected = state.selectedItemIndex === ownProps.postIndex;\r\n  const editable = state.editing && state.selectedItemIndex === ownProps.postIndex;\r\n  return {\r\n    title: ownProps.title,\r\n    date: ownProps.date,\r\n    body: ownProps.body,\r\n    creator: ownProps.creator,\r\n    postIndex: ownProps.postIndex,\r\n    selected: selected,\r\n    editable: editable,\r\n    editedPost: editable ? state.editedPost : null\r\n  };\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch, ownProps) {\r\n  return {\r\n    selectItem: () => dispatch(selectItem(ownProps.postIndex)),\r\n    deleteItem: () => dispatch(deleteItem(ownProps.postIndex)),\r\n    editItem: () => dispatch(editItem()),\r\n    updateEditedItem: editedPost => dispatch(updateEditedItem(editedPost)),\r\n    cancelEditing: () => dispatch(cancelEditing()),\r\n    updateItem: () => dispatch(updateItem()),\r\n  }\r\n}\r\n\r\nconst ItemPostHandler = connect(mapStateToProps, mapDispatchToProps)(ItemPost);\r\n\r\nexport default ItemPostHandler;","import React, { Component } from 'react';\r\nimport ItemPostHandler from './ItemPostHandler';\r\n\r\nclass ListPosts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.container = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.clickEvent = (event) => {\r\n      if(this.props.selectedItemIndex !== null && !this.container.current.contains(event.target)) {\r\n        this.props.deselectItem();\r\n      }\r\n    };\r\n    document.addEventListener('click', this.clickEvent);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener('click', this.clickEvent);\r\n  }\r\n\r\n  render() {\r\n     if (!this.props.requested) {\r\n       return <button onClick={this.props.load}>Load</button>\r\n     } else if (this.props.posts === null){\r\n       return <span>Loading...</span>\r\n     } else {\r\n      return <div ref={this.container}>{this.props.posts.map((posts, index) => <ItemPostHandler \r\n        key={posts.id}\r\n        title={posts.title}\r\n        date={posts.date}\r\n        creator={posts.creator}\r\n        body={posts.body} \r\n        postIndex={index}/>)}\r\n      </div>\r\n    }\r\n  }\r\n}\r\n\r\nexport default ListPosts;\r\n","import ListPosts from './ListPosts';\r\nimport {connect} from 'react-redux';\r\nimport {deselectItem, load} from '../redux/actions';\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    posts: state.posts,\r\n    selectedItemIndex: state.selectedItemIndex,\r\n    editedPost: state.editedPost,\r\n    editing: state.editing,\r\n    requested: state.requested\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n  return {\r\n    load: () => dispatch(load()),\r\n    deselectItem: () => dispatch(deselectItem())\r\n  }\r\n}\r\n\r\nconst ListPostsHandler = connect(mapStateToProps, mapDispatchToProps)(ListPosts);\r\n\r\nexport default ListPostsHandler;","import {\r\n  LOAD, \r\n  DISPLAY,\r\n  SELECT_ITEM,\r\n  DELETE_ITEM,\r\n  EDIT_ITEM,\r\n  DESELECT_ITEM,\r\n  UPDATE_EDITED_ITEM,\r\n  CANCEL_EDITING,\r\n  UPDATE_ITEM,\r\n} from './actions';\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  selectedItemIndex: null,\r\n  editedPost: null,\r\n  editing: null,\r\n  requested: false\r\n};\r\n\r\nexport function getNextState(state = initialState, action) {\r\n  switch (action.type) {\r\n    case LOAD:\r\n      return {\r\n        ...state,\r\n        requested: true\r\n      }\r\n    case DISPLAY: \r\n      return {\r\n        ...state,\r\n        posts: action.posts,\r\n        editing: false\r\n      }\r\n    case SELECT_ITEM:\r\n      if (state.editing) {\r\n        return state;\r\n      } else {\r\n        return {\r\n        ...state,\r\n        selectedItemIndex: action.selectedItemIndex,\r\n      };\r\n    }\r\n    case DESELECT_ITEM:\r\n      if (state.editing) {\r\n        return state;\r\n      }\r\n      return {\r\n        ...state,\r\n        selectedItemIndex: null,\r\n      };\r\n\r\n    case DELETE_ITEM:\r\n      let newSelectedItemIndex;\r\n      if (state.selectedItemIndex === action.itemIndex) {\r\n        newSelectedItemIndex = null;\r\n      } else if (state.selectedItemIndex > action.itemIndex) {\r\n        newSelectedItemIndex = state.selectedItemIndex - 1;\r\n      } else {\r\n        newSelectedItemIndex = state.selectedItemIndex;\r\n      }\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter((item, index) => index !== action.itemIndex),\r\n        selectedItemIndex: newSelectedItemIndex,\r\n        editedPost:\r\n          state.selectedItemIndex === action.itemIndex\r\n            ? null\r\n            : state.editedPost,\r\n        editing:\r\n          state.selectedItemIndex === action.itemIndex ? false : state.editing,\r\n      };\r\n    case EDIT_ITEM:\r\n      return {\r\n        ...state,\r\n        editing: true,\r\n        editedPost: state.posts[state.selectedItemIndex],\r\n      };\r\n    case UPDATE_EDITED_ITEM:\r\n      return {\r\n        ...state,\r\n        editedPost: action.editedPost,\r\n      };\r\n    case CANCEL_EDITING:\r\n      return {\r\n        ...state,\r\n        editing: false,\r\n        editedPost: null,\r\n      };\r\n    case UPDATE_ITEM:\r\n      return {\r\n        ...state,\r\n        posts: state.posts.map((item, index) => {\r\n          if (index !== state.selectedItemIndex) {\r\n            return item;\r\n          } else {\r\n            return state.editedPost;\r\n          }\r\n        }),\r\n        editing: false,\r\n        editedPost: null,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport ListPostsHandler from './components/ListPostsHandler';\nimport thunk from 'redux-thunk';\nimport { getNextState } from './redux/reducers';\n\nconst store = createStore(getNextState, applyMiddleware(thunk));\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ListPostsHandler />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}